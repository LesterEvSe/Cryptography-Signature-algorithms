use num_bigint::BigUint;
use num_primes::Generator;
use num_traits::One;
use sha256::digest;

pub struct RSA;

impl RSA {
    pub fn generate_key_pair(bits: usize) -> (BigUint, BigUint, BigUint) {
        assert!(bits >= 256);
        let p = Generator::new_prime(bits);
        let q = Generator::new_prime(bits);

        // To use a newer version of BigUint
        let p = BigUint::from_bytes_le(p.to_bytes_le().as_slice());
        let q = BigUint::from_bytes_le(q.to_bytes_le().as_slice());

        let n = p.clone() * q.clone();
        let fi_n = (p - BigUint::one()) * (q - BigUint::one());
        let e = BigUint::from(65_537_u32);
        let d = e.modinv(&fi_n).unwrap();
        (e, d, n)
    }

    pub fn sign_message(msg: &str, n: &BigUint, d: &BigUint) -> BigUint {
        let hashed = digest(msg);
        let res = BigUint::from_bytes_le(hashed.as_bytes());
        res.modpow(d, n)
    }

    pub fn verify_signature(msg: &str, sign: &BigUint, n: &BigUint, e: &BigUint) -> bool {
        let hashed = digest(msg);
        let actual = sign.modpow(e, n);
        BigUint::from_bytes_le(hashed.as_bytes()) == actual
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn orig_sha256() {
        // abc
        let input = &[97, 98, 99];
        let val = digest(input);
        assert_eq!(
            val,
            "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"
        );
    }

    #[test]
    #[allow(non_snake_case)]
    fn full_rsa_process_for_2048_bits_and_msg_RSA_signing() {
        let (e, d, n) = RSA::generate_key_pair(1024);
        let msg = "RSA signing";

        let sign = RSA::sign_message(msg, &n, &d);
        assert!(RSA::verify_signature(msg, &sign, &n, &e));
    }

    #[test]
    fn test_generate_2048_bits_key_pair_1() {
        let p = BigUint::from_bytes_le(&[
            249, 51, 148, 197, 197, 30, 70, 204, 225, 248, 126, 221, 153, 205, 190, 26, 67, 196,
            225, 254, 31, 58, 95, 200, 106, 209, 225, 28, 5, 41, 83, 196, 73, 48, 227, 93, 221,
            213, 203, 102, 91, 12, 171, 124, 151, 169, 245, 34, 14, 23, 97, 53, 225, 60, 32, 60,
            134, 43, 49, 0, 235, 114, 2, 77, 222, 129, 139, 11, 153, 120, 251, 183, 41, 190, 200,
            134, 65, 103, 84, 108, 192, 189, 241, 34, 3, 252, 19, 184, 196, 198, 18, 120, 33, 165,
            215, 38, 9, 52, 106, 213, 60, 171, 36, 27, 77, 132, 31, 173, 161, 165, 83, 47, 226,
            112, 171, 212, 187, 27, 90, 124, 139, 161, 198, 101, 218, 74, 95, 252,
        ]);
        let q = BigUint::from_bytes_le(&[
            61, 229, 112, 187, 85, 246, 9, 231, 33, 247, 198, 0, 210, 129, 73, 82, 224, 68, 48,
            187, 46, 91, 173, 48, 83, 23, 69, 147, 231, 226, 230, 210, 188, 198, 52, 66, 117, 252,
            59, 142, 73, 251, 138, 60, 205, 113, 27, 250, 253, 74, 17, 110, 42, 67, 68, 76, 232,
            181, 130, 248, 58, 65, 61, 5, 202, 238, 134, 237, 194, 138, 150, 226, 176, 197, 84,
            234, 239, 205, 140, 165, 134, 212, 129, 136, 247, 169, 177, 103, 193, 119, 217, 244,
            89, 180, 104, 148, 106, 156, 161, 121, 135, 131, 116, 234, 129, 53, 52, 131, 55, 113,
            182, 235, 163, 132, 168, 87, 144, 76, 64, 128, 50, 204, 43, 36, 76, 118, 127, 238,
        ]);

        let n = p.clone() * q.clone();
        let fi_n = (p - BigUint::one()) * (q - BigUint::one());
        let e = BigUint::from(65_537_u32);
        let d = e.modinv(&fi_n).unwrap();

        assert_eq!(
            n.to_bytes_le(),
            [
                85, 31, 190, 70, 88, 121, 253, 218, 107, 195, 208, 150, 168, 14, 137, 146, 143,
                157, 120, 84, 194, 49, 151, 227, 7, 193, 243, 242, 212, 38, 125, 19, 221, 209, 97,
                73, 15, 133, 149, 208, 178, 37, 3, 117, 109, 162, 68, 17, 219, 35, 73, 140, 111,
                189, 74, 6, 109, 203, 251, 118, 33, 190, 220, 218, 34, 38, 185, 130, 186, 123, 252,
                152, 18, 153, 3, 166, 13, 239, 139, 176, 187, 205, 46, 98, 62, 67, 204, 179, 151,
                241, 49, 146, 66, 175, 204, 251, 13, 35, 11, 73, 167, 9, 65, 28, 162, 50, 239, 239,
                33, 74, 100, 113, 32, 2, 138, 208, 171, 99, 26, 228, 122, 118, 183, 186, 69, 240,
                125, 230, 48, 188, 154, 142, 69, 246, 183, 111, 84, 163, 194, 128, 49, 109, 175,
                169, 172, 254, 221, 76, 245, 35, 235, 97, 30, 17, 239, 61, 44, 62, 32, 98, 141, 17,
                13, 146, 101, 15, 32, 123, 144, 183, 205, 205, 123, 2, 215, 198, 160, 12, 147, 202,
                66, 62, 26, 244, 91, 21, 1, 124, 0, 226, 143, 115, 157, 201, 93, 235, 249, 51, 50,
                65, 74, 176, 80, 168, 167, 237, 22, 110, 235, 235, 73, 184, 22, 206, 222, 213, 103,
                115, 9, 202, 111, 147, 157, 131, 21, 10, 41, 3, 34, 83, 105, 104, 2, 141, 192, 173,
                231, 65, 149, 7, 99, 46, 154, 62, 200, 110, 237, 152, 79, 159, 106, 41, 124, 63,
                30, 235
            ]
        );
        assert_eq!(
            d.to_bytes_le(),
            [
                225, 76, 156, 214, 23, 175, 6, 182, 107, 4, 119, 220, 55, 210, 157, 198, 134, 130,
                233, 157, 132, 169, 154, 164, 127, 79, 206, 26, 106, 20, 208, 135, 81, 123, 254,
                58, 137, 79, 167, 150, 124, 85, 25, 9, 232, 193, 221, 225, 33, 150, 54, 196, 180,
                48, 175, 69, 138, 74, 55, 247, 218, 142, 75, 144, 86, 19, 239, 21, 128, 136, 189,
                195, 206, 51, 84, 167, 146, 35, 101, 34, 109, 189, 130, 185, 63, 9, 67, 71, 107,
                42, 103, 107, 216, 246, 229, 151, 160, 211, 122, 109, 21, 101, 176, 200, 45, 99,
                154, 50, 80, 147, 106, 170, 194, 125, 239, 186, 176, 254, 101, 204, 27, 139, 65,
                223, 103, 221, 64, 62, 162, 250, 154, 250, 23, 87, 120, 191, 39, 167, 24, 56, 149,
                172, 114, 5, 196, 119, 198, 19, 175, 228, 101, 140, 42, 63, 135, 40, 81, 232, 133,
                187, 19, 236, 113, 46, 46, 38, 100, 174, 26, 213, 78, 86, 133, 155, 141, 196, 121,
                90, 149, 166, 35, 75, 48, 162, 114, 77, 40, 43, 171, 72, 30, 240, 60, 38, 158, 146,
                140, 62, 204, 232, 188, 141, 57, 39, 31, 72, 89, 152, 88, 85, 45, 191, 3, 177, 203,
                104, 178, 152, 80, 111, 73, 223, 202, 246, 61, 127, 132, 74, 128, 138, 74, 238,
                188, 120, 134, 206, 58, 180, 66, 116, 242, 226, 9, 183, 6, 64, 15, 213, 175, 187,
                110, 121, 87, 15, 184, 71
            ]
        );
    }

    #[test]
    fn test_generate_2048_bits_key_pair_2() {
        let p = BigUint::from_bytes_le(&[
            163, 24, 211, 253, 7, 96, 117, 217, 195, 105, 86, 91, 128, 110, 198, 23, 62, 90, 29,
            142, 107, 37, 143, 211, 78, 151, 168, 108, 21, 204, 209, 232, 64, 24, 194, 218, 162,
            120, 57, 216, 8, 53, 133, 190, 61, 234, 47, 240, 187, 85, 28, 37, 102, 208, 51, 152,
            237, 125, 119, 181, 154, 119, 28, 72, 198, 178, 67, 104, 62, 193, 76, 149, 21, 183,
            137, 139, 40, 6, 108, 5, 161, 36, 214, 80, 233, 245, 95, 216, 61, 114, 149, 152, 25,
            239, 92, 3, 125, 197, 194, 154, 64, 51, 120, 76, 229, 23, 236, 55, 167, 234, 16, 227,
            252, 51, 29, 228, 80, 143, 136, 142, 166, 8, 114, 18, 176, 108, 68, 201,
        ]);
        let q = BigUint::from_bytes_le(&[
            99, 65, 221, 197, 57, 27, 224, 48, 100, 158, 194, 147, 155, 196, 68, 187, 170, 182, 16,
            149, 86, 229, 4, 133, 151, 204, 208, 245, 163, 125, 77, 116, 82, 64, 96, 102, 111, 31,
            165, 129, 254, 181, 123, 214, 206, 249, 255, 204, 248, 208, 101, 41, 171, 232, 181, 38,
            188, 184, 53, 166, 104, 26, 99, 75, 75, 91, 105, 197, 57, 63, 212, 223, 66, 127, 249,
            179, 247, 65, 70, 31, 35, 112, 204, 45, 237, 12, 118, 27, 254, 84, 48, 244, 141, 238,
            82, 205, 3, 171, 139, 120, 218, 41, 33, 113, 34, 4, 82, 3, 76, 108, 208, 117, 147, 95,
            206, 219, 168, 238, 141, 63, 154, 211, 92, 129, 71, 52, 110, 248,
        ]);

        let n = p.clone() * q.clone();
        let fi_n = (p - BigUint::one()) * (q - BigUint::one());
        let e = BigUint::from(65_537_u32);
        let d = e.modinv(&fi_n).unwrap();

        assert_eq!(
            n.to_bytes_le(),
            [
                9, 234, 154, 117, 6, 105, 57, 217, 186, 206, 184, 78, 168, 226, 82, 32, 85, 169,
                195, 157, 81, 173, 117, 17, 151, 202, 196, 168, 7, 35, 223, 93, 107, 158, 179, 129,
                121, 88, 43, 165, 210, 58, 102, 57, 100, 238, 30, 77, 132, 11, 47, 150, 103, 183,
                44, 207, 164, 205, 102, 42, 195, 246, 116, 202, 228, 55, 4, 43, 89, 185, 144, 8, 6,
                132, 52, 62, 40, 251, 197, 126, 115, 69, 225, 194, 149, 55, 61, 83, 144, 215, 163,
                189, 100, 5, 102, 166, 50, 72, 157, 50, 14, 20, 179, 81, 126, 239, 200, 125, 119,
                205, 160, 183, 235, 70, 193, 174, 197, 82, 130, 129, 180, 177, 162, 172, 161, 182,
                186, 46, 33, 228, 193, 198, 253, 253, 41, 44, 171, 0, 181, 179, 96, 240, 130, 136,
                69, 223, 62, 98, 1, 63, 87, 106, 8, 56, 78, 228, 194, 186, 185, 106, 204, 116, 99,
                143, 94, 209, 217, 140, 83, 155, 213, 94, 134, 20, 48, 181, 50, 104, 112, 153, 6,
                251, 199, 203, 179, 6, 208, 214, 105, 7, 64, 66, 175, 126, 44, 110, 235, 33, 56,
                221, 33, 9, 159, 211, 93, 222, 234, 103, 222, 166, 67, 173, 29, 228, 66, 233, 83,
                39, 175, 184, 241, 229, 19, 112, 73, 229, 148, 120, 58, 159, 155, 132, 24, 239,
                143, 189, 9, 60, 252, 93, 118, 8, 106, 230, 48, 202, 79, 204, 173, 195, 72, 99,
                203, 237, 80, 195
            ]
        );
        assert_eq!(
            d.to_bytes_le(),
            [
                1, 153, 4, 87, 11, 121, 172, 16, 118, 18, 154, 126, 151, 82, 70, 143, 151, 178,
                137, 141, 44, 65, 1, 222, 214, 55, 237, 101, 166, 29, 229, 130, 103, 3, 190, 2,
                204, 58, 13, 45, 198, 197, 88, 177, 16, 208, 208, 105, 108, 125, 247, 80, 41, 165,
                236, 28, 82, 170, 59, 246, 21, 166, 103, 221, 75, 191, 40, 81, 7, 140, 144, 211,
                146, 192, 179, 144, 198, 96, 123, 253, 62, 12, 211, 253, 46, 103, 162, 145, 120,
                33, 141, 144, 55, 192, 39, 65, 116, 134, 50, 183, 14, 228, 67, 97, 99, 187, 146,
                55, 1, 28, 21, 221, 130, 97, 96, 121, 196, 250, 249, 214, 111, 159, 145, 252, 216,
                51, 206, 70, 126, 70, 223, 170, 195, 241, 238, 211, 116, 138, 15, 129, 183, 30,
                203, 45, 251, 87, 178, 68, 203, 8, 31, 80, 90, 12, 135, 49, 41, 38, 175, 136, 241,
                28, 117, 92, 80, 168, 143, 87, 114, 199, 215, 9, 137, 161, 169, 210, 52, 110, 105,
                183, 95, 171, 163, 244, 128, 91, 44, 59, 224, 202, 21, 72, 32, 56, 121, 13, 72, 59,
                68, 112, 87, 86, 14, 239, 183, 10, 153, 132, 104, 208, 253, 116, 118, 101, 38, 146,
                196, 177, 176, 67, 83, 136, 68, 106, 191, 42, 213, 77, 212, 204, 132, 91, 114, 47,
                205, 141, 41, 86, 209, 168, 56, 158, 168, 59, 95, 204, 34, 18, 184, 24, 112, 183,
                247, 196, 2, 78
            ]
        );
    }
}
