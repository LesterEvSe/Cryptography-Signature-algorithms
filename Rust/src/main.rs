use num_bigint::BigUint;
use num_primes::Generator;
use num_traits::One;

//use crypto_bigint::{rand_core::OsRng, Encoding, Random, Wrapping, U1024, U2048};

//#[allow(non_camel_case_types)]
//type u2048 = Wrapping<U2048>;

pub struct SigAlg;

impl SigAlg {
    pub fn generate_key_pair() -> (BigUint, BigUint, BigUint) {
        let p = Generator::new_prime(1024);
        let q = Generator::new_prime(1024);

        // To use a newer version of BigUint
        let p = BigUint::from_bytes_le(p.to_bytes_le().as_slice());
        let q = BigUint::from_bytes_le(q.to_bytes_le().as_slice());

        let n = p.clone() * q.clone();
        let fi_n = (p - BigUint::one()) * (q - BigUint::one());
        let e = BigUint::from(65_537_u32);
        let d = e.modinv(&fi_n).unwrap();

        //println!("n = {:?}\nd = {:?}", n.to_bytes_le(), d.to_bytes_le());

        (e, d, n)
    }
}

fn main() {
    SigAlg::generate_key_pair();
}

#[test]
fn test_generate_2048_bits_key_pair() {
    let p = BigUint::from_bytes_le(&[
        163, 24, 211, 253, 7, 96, 117, 217, 195, 105, 86, 91, 128, 110, 198, 23, 62, 90, 29, 142,
        107, 37, 143, 211, 78, 151, 168, 108, 21, 204, 209, 232, 64, 24, 194, 218, 162, 120, 57,
        216, 8, 53, 133, 190, 61, 234, 47, 240, 187, 85, 28, 37, 102, 208, 51, 152, 237, 125, 119,
        181, 154, 119, 28, 72, 198, 178, 67, 104, 62, 193, 76, 149, 21, 183, 137, 139, 40, 6, 108,
        5, 161, 36, 214, 80, 233, 245, 95, 216, 61, 114, 149, 152, 25, 239, 92, 3, 125, 197, 194,
        154, 64, 51, 120, 76, 229, 23, 236, 55, 167, 234, 16, 227, 252, 51, 29, 228, 80, 143, 136,
        142, 166, 8, 114, 18, 176, 108, 68, 201,
    ]);
    let q = BigUint::from_bytes_le(&[
        99, 65, 221, 197, 57, 27, 224, 48, 100, 158, 194, 147, 155, 196, 68, 187, 170, 182, 16,
        149, 86, 229, 4, 133, 151, 204, 208, 245, 163, 125, 77, 116, 82, 64, 96, 102, 111, 31, 165,
        129, 254, 181, 123, 214, 206, 249, 255, 204, 248, 208, 101, 41, 171, 232, 181, 38, 188,
        184, 53, 166, 104, 26, 99, 75, 75, 91, 105, 197, 57, 63, 212, 223, 66, 127, 249, 179, 247,
        65, 70, 31, 35, 112, 204, 45, 237, 12, 118, 27, 254, 84, 48, 244, 141, 238, 82, 205, 3,
        171, 139, 120, 218, 41, 33, 113, 34, 4, 82, 3, 76, 108, 208, 117, 147, 95, 206, 219, 168,
        238, 141, 63, 154, 211, 92, 129, 71, 52, 110, 248,
    ]);

    let n = p.clone() * q.clone();
    let fi_n = (p - BigUint::one()) * (q - BigUint::one());
    let e = BigUint::from(65_537_u32);
    let d = e.modinv(&fi_n).unwrap();

    assert_eq!(
        n.to_bytes_le(),
        [
            9, 234, 154, 117, 6, 105, 57, 217, 186, 206, 184, 78, 168, 226, 82, 32, 85, 169, 195,
            157, 81, 173, 117, 17, 151, 202, 196, 168, 7, 35, 223, 93, 107, 158, 179, 129, 121, 88,
            43, 165, 210, 58, 102, 57, 100, 238, 30, 77, 132, 11, 47, 150, 103, 183, 44, 207, 164,
            205, 102, 42, 195, 246, 116, 202, 228, 55, 4, 43, 89, 185, 144, 8, 6, 132, 52, 62, 40,
            251, 197, 126, 115, 69, 225, 194, 149, 55, 61, 83, 144, 215, 163, 189, 100, 5, 102,
            166, 50, 72, 157, 50, 14, 20, 179, 81, 126, 239, 200, 125, 119, 205, 160, 183, 235, 70,
            193, 174, 197, 82, 130, 129, 180, 177, 162, 172, 161, 182, 186, 46, 33, 228, 193, 198,
            253, 253, 41, 44, 171, 0, 181, 179, 96, 240, 130, 136, 69, 223, 62, 98, 1, 63, 87, 106,
            8, 56, 78, 228, 194, 186, 185, 106, 204, 116, 99, 143, 94, 209, 217, 140, 83, 155, 213,
            94, 134, 20, 48, 181, 50, 104, 112, 153, 6, 251, 199, 203, 179, 6, 208, 214, 105, 7,
            64, 66, 175, 126, 44, 110, 235, 33, 56, 221, 33, 9, 159, 211, 93, 222, 234, 103, 222,
            166, 67, 173, 29, 228, 66, 233, 83, 39, 175, 184, 241, 229, 19, 112, 73, 229, 148, 120,
            58, 159, 155, 132, 24, 239, 143, 189, 9, 60, 252, 93, 118, 8, 106, 230, 48, 202, 79,
            204, 173, 195, 72, 99, 203, 237, 80, 195
        ]
    );
    assert_eq!(
        d.to_bytes_le(),
        [
            1, 153, 4, 87, 11, 121, 172, 16, 118, 18, 154, 126, 151, 82, 70, 143, 151, 178, 137,
            141, 44, 65, 1, 222, 214, 55, 237, 101, 166, 29, 229, 130, 103, 3, 190, 2, 204, 58, 13,
            45, 198, 197, 88, 177, 16, 208, 208, 105, 108, 125, 247, 80, 41, 165, 236, 28, 82, 170,
            59, 246, 21, 166, 103, 221, 75, 191, 40, 81, 7, 140, 144, 211, 146, 192, 179, 144, 198,
            96, 123, 253, 62, 12, 211, 253, 46, 103, 162, 145, 120, 33, 141, 144, 55, 192, 39, 65,
            116, 134, 50, 183, 14, 228, 67, 97, 99, 187, 146, 55, 1, 28, 21, 221, 130, 97, 96, 121,
            196, 250, 249, 214, 111, 159, 145, 252, 216, 51, 206, 70, 126, 70, 223, 170, 195, 241,
            238, 211, 116, 138, 15, 129, 183, 30, 203, 45, 251, 87, 178, 68, 203, 8, 31, 80, 90,
            12, 135, 49, 41, 38, 175, 136, 241, 28, 117, 92, 80, 168, 143, 87, 114, 199, 215, 9,
            137, 161, 169, 210, 52, 110, 105, 183, 95, 171, 163, 244, 128, 91, 44, 59, 224, 202,
            21, 72, 32, 56, 121, 13, 72, 59, 68, 112, 87, 86, 14, 239, 183, 10, 153, 132, 104, 208,
            253, 116, 118, 101, 38, 146, 196, 177, 176, 67, 83, 136, 68, 106, 191, 42, 213, 77,
            212, 204, 132, 91, 114, 47, 205, 141, 41, 86, 209, 168, 56, 158, 168, 59, 95, 204, 34,
            18, 184, 24, 112, 183, 247, 196, 2, 78
        ]
    );
}
